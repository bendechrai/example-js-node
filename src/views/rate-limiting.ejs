<section class="content container mx-auto px-4 py-8">
  <div class="section">
    <h1
      class="text-3xl font-extrabold leading-tight tracking-tighter md:text-4xl"
    >
      Arcjet rate limiting example
    </h1>
    <p class="max-w-[700px] text-lg">
      This page is protected by
      <a
        href="https://docs.arcjet.com/bot-protection/concepts"
        class="font-bold hover:underline decoration-1 underline-offset-2"
      >
        Arcjet's rate limiting </a
      >.
    </p>
  </div>

  <div class="divider border-t border-border"></div>

  <div class="section">
    <h2 class="text-xl font-bold">Try it</h2>
    <form id="rlForm" class="space-y-8">
      <button
        type="submit"
        class="inline-flex items-center justify-center rounded-full text-md font-bold transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background bg-primary text-primary-foreground hover:bg-primary/90 h-9 py-1 px-5"
      >
        Push me
      </button>
    </form>

    <% if (user) { %>
    <p class="text-green-500">
      You are authenticated as <%= user.email %>
      <span class="text-secondary-foreground">
        – the limit is set to 5 requests every 60 seconds.
      </span>
    </p>
    <% } else { %>
    <p class="text-red-400">
      You are not authenticated
      <span class="text-secondary-foreground">
        – the limit is set to 2 requests every 60 seconds.
      </span>
    </p>
    <% } %>

    <p class="max-w-[700px] text-secondary-foreground">
      Rate limits can be
      <a
        href="https://docs.arcjet.com/reference/nextjs#ad-hoc-rules"
        class="font-bold hover:underline decoration-1 underline-offset-2"
      >
        dynamically adjusted
      </a>
      e.g. to set a limit based on the authenticated user.
    </p>

    <% if (user) { %>
    <form action="/auth/signout" method="post">
      <button
        type="submit"
        class="inline-flex items-center justify-center rounded-full text-md font-bold transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background border border-input hover:bg-accent hover:text-accent-foreground h-9 py-1 px-5"
      >
        Sign out
      </button>
    </form>
    <% } else { %>
    <form action="/auth/signin" method="post">
      <button
        type="submit"
        class="inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background bg-secondary text-secondary-foreground hover:bg-secondary/80 h-10 py-2 px-4"
      >
        Sign In
      </button>
    </form>
    <% } %>
  </div>

  <div class="divider border-t border-border"></div>

  <div class="section">
    <h2 class="text-xl font-bold">See the code</h2>
    <p class="text-secondary-foreground">
      The
      <a
        href="https://github.com/arcjet/example-js-node/blob/main/src/routes/rate-limiting.ts"
        target="_blank"
        rel="noreferrer"
        class="font-bold hover:underline decoration-1 underline-offset-2"
      >
        API route
      </a>
      imports a
      <a
        href="https://github.com/arcjet/example-js-node/blob/main/src/lib/arcjet.ts"
        target="_blank"
        rel="noreferrer"
        class="font-bold hover:underline decoration-1 underline-offset-2"
      >
        centralized Arcjet client
      </a>
      which sets base rules.
    </p>
  </div>

  <div class="divider border-t border-border"></div>

  <%- include('partials/what-next', { deployed: siteKey != null }) %>
</section>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("rlForm");

    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      try {
        // Send a POST request to the /rate-limiting/test endpoint
        const response = await fetch("/rate-limiting/test", { method: "POST" });
        const data = await response.json();
        const message = data.message || data.error;

        // Create a <pre id="result">message</pre> element
        const result = document.createElement("pre");
        result.id = "result";
        result.textContent = message;

        // If there's a <pre id="result">message</pre> element in the DOM already,
        // replace it with the new one, else append it to the form
        const existingResult = document.getElementById("result");
        if (existingResult) {
          existingResult.replaceWith(result);
        } else {
          form.appendChild(result);
        }
      } catch (error) {
      }
    });
  });
</script>
